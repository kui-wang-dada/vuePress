(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{316:function(a,t,s){"use strict";s.r(t);var e=s(38),r=Object(e.a)({},function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"docker-命令学习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-命令学习","aria-hidden":"true"}},[a._v("#")]),a._v(" docker 命令学习")]),a._v(" "),s("h2",{attrs:{id:"常见命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见命令","aria-hidden":"true"}},[a._v("#")]),a._v(" 常见命令")]),a._v(" "),s("h3",{attrs:{id:"下载-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载-docker","aria-hidden":"true"}},[a._v("#")]),a._v(" 下载 docker")]),a._v(" "),s("h4",{attrs:{id:"centos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos","aria-hidden":"true"}},[a._v("#")]),a._v(" centOS")]),a._v(" "),s("ol",[s("li",[a._v("移除服务器上老的 docker")])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("sudo yum remove docker \\\n                  docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("client \\\n                  docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("client"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("latest \\\n                  docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("common \\\n                  docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("latest \\\n                  docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("latest"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("logrotate \\\n                  docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("logrotate \\\n                  docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("engine\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("下载对应插件")])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("sudo yum install "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("y yum"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("utils \\\n  device"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("mapper"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("persistent"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("data \\\n  lvm2\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[a._v("配置仓库")])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("sudo yum"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("config"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("manager \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("add"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("repo \\\n    https"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("download"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("linux"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("centos"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("ce"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("repo\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[a._v("下载 docker-cli")])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("sudo yum install docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("ce docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("ce"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("cli containerd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("io\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[s("p",[a._v("启动 docker——"),s("code",[a._v("sudo systemctl start docker")])])]),a._v(" "),s("li",[s("p",[a._v("测试 docker 安装是否成功——"),s("code",[a._v("sudo docker run hello-world")])])]),a._v(" "),s("li",[s("p",[a._v("查看当前下载镜像"),s("code",[a._v("docker image ls")])])]),a._v(" "),s("li",[s("p",[a._v("下载 docker-compose")])])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("sudo curl "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("L")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("local"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("bin"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("docker"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("compose\n")])])]),s("ol",{attrs:{start:"9"}},[s("li",[s("p",[a._v("解析 docker-compose\n"),s("code",[a._v("sudo chmod +x /usr/local/bin/docker-compose")])])]),a._v(" "),s("li",[s("p",[a._v("配置 docker-compose 的路径\n"),s("code",[a._v("sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose")])])]),a._v(" "),s("li",[s("p",[a._v("查看版本"),s("code",[a._v("docker-compose --version")])])])]),a._v(" "),s("h2",{attrs:{id:"docke-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docke-基础","aria-hidden":"true"}},[a._v("#")]),a._v(" docke 基础")]),a._v(" "),s("h3",{attrs:{id:"_1-docker-提供了一个开发，打包，运行-app-的平台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker-提供了一个开发，打包，运行-app-的平台","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. docker 提供了一个开发，打包，运行 app 的平台")]),a._v(" "),s("h3",{attrs:{id:"_2-image-镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-image-镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. image:镜像")]),a._v(" "),s("ul",[s("li",[a._v("文件和 meta data 的集合（root filesystem）")]),a._v(" "),s("li",[a._v("分层的，并且每一层都可以添加改变删除文件，成为一个新的 image")]),a._v(" "),s("li",[a._v("不同的 image 可以共享相同的 layer")]),a._v(" "),s("li",[a._v("image 本身是 read-only 的")])]),a._v(" "),s("h4",{attrs:{id:"获取-image-build-from-dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取-image-build-from-dockerfile","aria-hidden":"true"}},[a._v("#")]),a._v(" 获取 image: build from dockerfile")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  选择基本image")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("FROM")]),a._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("14.04")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//  选择基本标识")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LABEL")]),a._v(" maintainer"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Peng Xiao <xiaoquwl@gmail.com>"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 运行代码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("get")]),a._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("get")]),a._v(" install "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("y redis"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("server\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 暴露的端口")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("EXPOSE")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6379")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 程序的入口，启动redis-server")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ENTRYPOINT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/usr/bin/redis-server"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n")])])]),s("p",[a._v("然后执行命令"),s("code",[a._v("docker build -t xiaopeng163/redis:latest .")]),a._v(" "),s("code",[a._v("-t")]),a._v("表示当前目录的名字\n"),s("code",[a._v(".")]),a._v(" 表示基于当前目录的 dockerfile 构建")]),a._v(" "),s("h4",{attrs:{id:"获取-image-pull-from-registry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取-image-pull-from-registry","aria-hidden":"true"}},[a._v("#")]),a._v(" 获取 image:pull from registry")]),a._v(" "),s("blockquote",[s("p",[a._v("类似与 git，把 image 传到 registry 上面(dockerhub)，然后通过 pull 命令拉取")])]),a._v(" "),s("p",[a._v("eg: "),s("code",[a._v("docker pull ubuntu:14.04")])]),a._v(" "),s("h4",{attrs:{id:"构建一个-base-image"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建一个-base-image","aria-hidden":"true"}},[a._v("#")]),a._v(" 构建一个 base image")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("创建一个 dockerfile 文件")])]),a._v(" "),s("li",[s("p",[a._v("编写 dockerfile")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("FROM")]),a._v(" scratch\n\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ADD")]),a._v(" hello "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CMD")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker build -t xiaopeng163/hello-world .")]),a._v(" 在 dockerhub 上的 xiaopeng163 中创建名为 hello-world 的 image")])])]),a._v(" "),s("h3",{attrs:{id:"_3-container：容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-container：容器","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. container：容器")]),a._v(" "),s("ul",[s("li",[a._v("通过 Image 创建（copy）")]),a._v(" "),s("li",[a._v("在 Image layer 之上建立一个 container layer (可读写)")]),a._v(" "),s("li",[a._v("类比面向对象：类和实例")]),a._v(" "),s("li",[a._v("Image 负责 app 的存储和分发，container 负责运行 app")])]),a._v(" "),s("h3",{attrs:{id:"_4-构建自己的-docker-镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-构建自己的-docker-镜像","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. 构建自己的 docker 镜像")]),a._v(" "),s("blockquote",[s("p",[a._v("对 base image 的某一个 container 做了修改之后，重新构建为新的 image")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("docker container commit")]),a._v(" "),s("p",[s("code",[a._v("docker commit containerName dockerhubRep/imgName")])]),a._v(" "),s("p",[a._v("不太提倡，无法保障 image 的安全")])]),a._v(" "),s("li",[s("p",[a._v("docker image build")]),a._v(" "),s("blockquote",[s("p",[a._v("通过 dockerfile build 一个 image")])]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("FROM")]),a._v(" centos\n\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("RUN")]),a._v(" yum install "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("y vim\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 我们知道image是不可变的，在build过程中，会生成一个临时的container，这个和js的包装对象类似")]),a._v("\n")])])]),s("p",[a._v("运行"),s("code",[a._v("docker build -t dockerhubRep/imageName .")])])])]),a._v(" "),s("h3",{attrs:{id:"_5-dockerfile-语法解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-dockerfile-语法解析","aria-hidden":"true"}},[a._v("#")]),a._v(" 5. dockerfile 语法解析")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 尽量使用官方的image，确保安全")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 制作base image")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("FROM")]),a._v(" scratch\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使用base image;")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("FROM")]),a._v(" centos\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// image的信息，类似与代码中的注释")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LABEL")]),a._v(" maintainer\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LABEL")]),a._v(" version\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("LABEL")]),a._v(" description\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 每运行一个RUN，都会新生成一个layer,故建议通过&&和\\将多个命令合并为一个")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("RUN")]),a._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 设定当前工作目录，如果根目录下没有root，会自动创建，")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使用workdir,不要用run cd ；尽量使用绝对目录")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("WORKDIR")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("root\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 将文件添加到指定目录")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ADD 还可以解压缩")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 大部分情况，copy优于ADD，添加远程文件/目录使用curl或者wget")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ADD")]),a._v(" hello "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("   将hello添加到根目录\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("COPY")]),a._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 设置常量，尽量使用，增加可维护性")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ENV")]),a._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 存储和网络")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("VOLUME")]),a._v(" and "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("EXPOSE")]),a._v("\n")])])]),s("p",[s("code",[a._v("RUN")]),a._v(" 执行命令并创建新的 image layer")]),a._v(" "),s("p",[s("code",[a._v("CMD")]),a._v(" 设置容器启动后默认执行的命令和参数\n如果 docker run 指定了其他命令，cmd 命令被忽略\n如果定义了多个 cmd ，只有最后一个会执行")]),a._v(" "),s("p",[s("code",[a._v("ENTRYPOINT")]),a._v(" 设置容器启动时运行的命令\n不会被忽略，一定会执行\n最佳实践：写一个 shell 脚本作为 entrypoint")]),a._v(" "),s("pre",[s("code",[a._v("        ```javascript\n        COPY docker-entrypoint.sh /usr/local/bin/\n        ENTRYPOINT ['docker-entrypoint.sh']\n        EXPOSE 27017\n        CMD [\"mongod\"]\n        ```\n")])]),a._v(" "),s("p",[a._v("shell 格式")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("RUN")]),a._v(" apt"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("get")]),a._v(" install "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("y vim\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CMD")]),a._v(" echo "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello docker"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ENTRYPOINT")]),a._v(" echo "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello docker"')]),a._v("\n")])])]),s("p",[a._v("Exec 格式")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("RUN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'apt-get'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'install'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'-y'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'vim'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CMD")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'echo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'hello docker'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ENTRYPOINT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'echo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'hello docker'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("h3",{attrs:{id:"_6-将-image-发布到-dockerhub"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-将-image-发布到-dockerhub","aria-hidden":"true"}},[a._v("#")]),a._v(" 6. 将 image 发布到 dockerhub")]),a._v(" "),s("ul",[s("li",[a._v("docker login")]),a._v(" "),s("li",[a._v("docker push imageName:tag")])]),a._v(" "),s("h2",{attrs:{id:"docker-network"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-network","aria-hidden":"true"}},[a._v("#")]),a._v(" docker network")]),a._v(" "),s("h3",{attrs:{id:"端口映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#端口映射","aria-hidden":"true"}},[a._v("#")]),a._v(" 端口映射")]),a._v(" "),s("p",[s("code",[a._v("docker run --name web -d -p 80:80 nginx")])]),a._v(" "),s("p",[a._v("--name: 容器命名\n-d:后台运行\n-p:端口映射 主机端口：容器端口")]),a._v(" "),s("h2",{attrs:{id:"docker-volumn-数据持久化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-volumn-数据持久化","aria-hidden":"true"}},[a._v("#")]),a._v(" docker volumn 数据持久化")]),a._v(" "),s("ul",[s("li",[a._v("基于本地文件系统的 volumn\n可以在执行 docker create 或 docker run 时，通过-v 参数将主机的目录作为容器的数据卷。")]),a._v(" "),s("li",[a._v("基于 plugin 的 volumn，支持第三方的存储方案，比如 nas,aws")])]),a._v(" "),s("h3",{attrs:{id:"volumn-的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volumn-的类型","aria-hidden":"true"}},[a._v("#")]),a._v(" volumn 的类型")]),a._v(" "),s("ul",[s("li",[a._v("受管理的 data volumn，由 docker 后台自动创建。")]),a._v(" "),s("li",[a._v("绑定挂载的 volumn，具体挂载位置可以由用户指定。")])]),a._v(" "),s("h3",{attrs:{id:"具体用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体用法","aria-hidden":"true"}},[a._v("#")]),a._v(" 具体用法")]),a._v(" "),s("blockquote",[s("p",[a._v("dockerfile 中：volume ['/var/lib/mysql']")])]),a._v(" "),s("ol",[s("li",[s("code",[a._v("docker volumn ls")]),a._v(" 查看 volume")]),a._v(" "),s("li",[s("code",[a._v("docker volumn inspect id")]),a._v(" 查看指定 volume")]),a._v(" "),s("li",[s("code",[a._v("docker volumn rm id")]),a._v(" 删除 volume")]),a._v(" "),s("li",[s("code",[a._v("docker run -d -v mysql:/var/lib/mysql --name mysql1")]),a._v(" -v 将/var/lib/mysql 的 volume 命名为 mysql")])]),a._v(" "),s("h3",{attrs:{id:"bind-mounting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bind-mounting","aria-hidden":"true"}},[a._v("#")]),a._v(" bind mounting")]),a._v(" "),s("blockquote",[s("p",[a._v("将本地文件和容器映射")])]),a._v(" "),s("p",[s("code",[a._v("docker run -d -v $(pwd):/usr/share/nginx/html -p 80:80 --name web 。。。")])]),a._v(" "),s("p",[a._v("$(pwd)代表当前目录")]),a._v(" "),s("h2",{attrs:{id:"docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose","aria-hidden":"true"}},[a._v("#")]),a._v(" docker-compose")]),a._v(" "),s("blockquote",[s("p",[a._v("批处理多容器的 app")])]),a._v(" "),s("ul",[s("li",[a._v("是一个基于 docker 的命令行工具")]),a._v(" "),s("li",[a._v("通过一个 yml 文件定义多容器的 docker 应用")]),a._v(" "),s("li",[a._v("通过一条命令就可以根据 yml 文件的定义去创建或者管理多个容器")]),a._v(" "),s("li",[a._v("yml 主要包括 services,networks,volumes")])]),a._v(" "),s("h2",{attrs:{id:"基础命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础命令","aria-hidden":"true"}},[a._v("#")]),a._v(" 基础命令")]),a._v(" "),s("ol",[s("li",[s("p",[s("code",[a._v("docker image ls")]),a._v(" 查看本机的 image")]),a._v(" "),s("p",[s("code",[a._v("docker image rm id")]),a._v(" 删除某一个 image")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker container ls")]),a._v(" 查看本机的正在运行的容器")]),a._v(" "),s("p",[s("code",[a._v("docker container ls -a")]),a._v("查看历史运行过的容器")]),a._v(" "),s("p",[s("code",[a._v("docker container rm id")]),a._v(" 删除某一个容器")]),a._v(" "),s("p",[s("code",[a._v("docker container prune")]),a._v(" 删除关闭了的容器")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker run/exec -it name /bin/bash")]),a._v(" 运行某一个容器并进入 bash")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker network inspect bridge")]),a._v(" 看到对应容器的 bridge\n"),s("code",[a._v("ping ip")]),a._v(" ping 通 ip\n"),s("code",[a._v("telnet ip:duankou")]),a._v(" 查看端口情况\n"),s("code",[a._v("curl ip")]),a._v(" 访问 ip")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker-compose up -d")]),a._v(" 根据命令行目录下的 docker-compose.yml 文件起项目，-d 不打印日志并后台运行")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker-compose ps")]),a._v(" 查看多个容器中的服务的情况")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker-compose stop")]),a._v(" 关闭容器中的服务但不删除")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker-compose done")]),a._v(" 关闭容器并删除容器")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker-compose images")]),a._v(" 列出 images")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker-compose exec [container] bash")]),a._v(" 进入容器的 bash 命令行")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker rmi $(docker images -q)")]),a._v(" 删除所有镜像")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("docker stop/rm $(docker ps -aq)")]),a._v(" 停止/删除所有容器")])])]),a._v(" "),s("h2",{attrs:{id:"配置-docker-compose-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置-docker-compose-yml","aria-hidden":"true"}},[a._v("#")]),a._v(" 配置 docker-compose.yml")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[a._v("\n")])])]),s("h2",{attrs:{id:"mongo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mongo","aria-hidden":"true"}},[a._v("#")]),a._v(" mongo")]),a._v(" "),s("h3",{attrs:{id:"身份认证："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#身份认证：","aria-hidden":"true"}},[a._v("#")]),a._v(" 身份认证：")]),a._v(" "),s("p",[a._v("MongoDB 安装完成后，默认是没有权限验证的，默认是不需要输入用户名密码即可登录的，但是往往数据库方面我们会出于安全性的考虑而设置用户名密码。\n即任何客户端都可以使用 mongo IP:27017/admin 命令登录 mongo 服务\n启用访问控制前，请确保在 admin 数据库中拥有 userAdmin 或 userAdminAnyDatabase 角色的用户。\n该用户可以管理用户和角色，例如：创建用户，授予或撤销用户角色，以及创建或修改定义角色。\n启用验证的方式：")]),a._v(" "),s("ol",[s("li",[a._v("/etc/mongodb.conf //将 auth=true 前面的注释拿掉，然后重启服务生效。")]),a._v(" "),s("li",[a._v("2.线上生产环境使用的是 docker:\na. 需要在 config 和 shard 服务的启动命令中加上“--auth”参数。\nb. 需要在宿主机生成一个 keyfile 文件：openssl rand -base64 755 > mongo.key，\n分别放在 mongos、config 和 shard 目录中，并修改目录权限：chown -R 999:999 mongos 和 keyfile 权限：chmod 600 mongos/mongo.key\nc. 在 config 和 shard 和 mongos 服务启动命令中添加“--keyFile /data/db/mongo.key”参数。")])]),a._v(" "),s("h3",{attrs:{id:"用户权限："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户权限：","aria-hidden":"true"}},[a._v("#")]),a._v(" 用户权限：")]),a._v(" "),s("p",[a._v("一，掌握权限，理解下面 4 条基本上就差不多")]),a._v(" "),s("ol",[s("li",[a._v("mongodb 是没有默认管理员账号，所以要先添加管理员账号，在开启权限认证。")]),a._v(" "),s("li",[a._v("切换到 admin 数据库，添加的账号才是管理员账号。")]),a._v(" "),s("li",[a._v("用户只能在用户所在数据库登录，包括管理员账号。")]),a._v(" "),s("li",[a._v("mongo 的用户是以数据库为单位来建立的，每个数据库有自己的管理员。")]),a._v(" "),s("li",[a._v("管理员可以管理所有数据库，但是不能直接管理其他数据库，要先在 admin 数据库认证后才可以。\n注：帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证")])]),a._v(" "),s("p",[s("code",[a._v('db.createUser({user: "admin",pwd: "123456",roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]})')])]),a._v(" "),s("p",[s("code",[a._v('db.createUser({user: "root",pwd: "123456",roles: [ { role: "root", db: "admin" } ]})')])]),a._v(" "),s("p",[s("code",[a._v('db.createUser({user: "position",pwd: "123456",roles: [ { role: "dbOwner", db: "position" } ]})')])])])},[],!1,null,null,null);t.default=r.exports}}]);